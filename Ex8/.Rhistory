Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 75, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
install.packages(rio)
install.packages(rio)
library(rio)
install_formats(rio)
install_formats(rio)
install.packages(rio)
library(rio)
library(rio)
library(rio)
library(rio)
library(ggplot2)
library(rio)
library(scales)
library(readxl)
library(stats)
econ <- read_excel("Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex1/econ.xlsx",
col_types = c("skip", "skip", "skip",
"numeric", "skip", "numeric"))
tpp <- econ$tpp
z_tpp <- (tpp - mean(tpp)) / sd(tpp)
ndesemp <- econ$ndesemp
z_ndesemp <- (ndesemp - mean(ndesemp)) / sd(ndesemp)
multi <- data.frame(
Parametros = rep(c("z_tpp", "z_ndesemp"), each = length(tpp)),
Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 75, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
library(rio)
urlmy<-"https://web.tecnico.ulisboa.pt/~ist13493/PE_aulas2023/R_Material_exerciciosR/ex1.xlsx"
library(rio)
install_formats()
library(rio)
library(scales)
library(stats)
econ <- read_excel("Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex1/econ.xlsx",
col_types = c("skip", "skip", "skip",
"numeric", "skip", "numeric"))
tpp <- econ$tpp
z_tpp <- (tpp - mean(tpp)) / sd(tpp)
ndesemp <- econ$ndesemp
z_ndesemp <- (ndesemp - mean(ndesemp)) / sd(ndesemp)
multi <- data.frame(
Parametros = rep(c("z_tpp", "z_ndesemp"), each = length(tpp)),
Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 75, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
library(ggplot2)
library(rio)
library(scales)
library(stats)
econ <- read_excel("Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex1/econ.xlsx",
col_types = c("skip", "skip", "skip",
"numeric", "skip", "numeric"))
tpp <- econ$tpp
z_tpp <- (tpp - mean(tpp)) / sd(tpp)
ndesemp <- econ$ndesemp
z_ndesemp <- (ndesemp - mean(ndesemp)) / sd(ndesemp)
multi <- data.frame(
Parametros = rep(c("z_tpp", "z_ndesemp"), each = length(tpp)),
Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 75, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
library(ggplot2)
library(rio)
library(scales)
library(stats)
econ <- read_excel("Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex1/econ.xlsx",
col_types = c("skip", "skip", "skip",
"numeric", "skip", "numeric"))
tpp <- econ$tpp
z_tpp <- (tpp - mean(tpp)) / sd(tpp)
ndesemp <- econ$ndesemp
z_ndesemp <- (ndesemp - mean(ndesemp)) / sd(ndesemp)
multi <- data.frame(
Parametros = rep(c("z_tpp", "z_ndesemp"), each = length(tpp)),
Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 50, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
econ <- read_excel("Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex1/econ.xlsx",
col_types = c("skip", "skip", "skip",
"numeric", "skip", "numeric"))
tpp <- econ$tpp
z_tpp <- (tpp - mean(tpp)) / sd(tpp)
ndesemp <- econ$ndesemp
z_ndesemp <- (ndesemp - mean(ndesemp)) / sd(ndesemp)
multi <- data.frame(
Parametros = rep(c("z_tpp", "z_ndesemp"), each = length(tpp)),
Ozono = c(z_tpp, z_ndesemp)
)
ggplot(multi, aes(x = Ozono, fill = Parametros)) +
geom_histogram(bins = 50, alpha = 0.6, position = "identity") +
labs(x = expression("Quantidade de Ozono por metro cúbico ug/m"^3),
y = "Frequência")
set.seed(1840)
n <- 1192
p <- 0.35
sample <- numeric(n)
# Simulação da distribuição geométrica de parâmetro p
for (i in 1:n) {
u <- runif(1)
x <- floor(log(1 - u) / log(1 - p))
sample[i] <- x
}
# Cálculo da média e do desvio padrão amostrais
mean <- mean(sample)
std <- sd(sample)
# Cálculo da soma da média com o desvio padrão amostrais
sum_mean_std <- mean + std
# Contagem dos valores simulados superiores à soma da média com o desvio padrão amostrais
count <- sum(sample > sum_mean_std)
# Cálculo da proporção
proportion <- count / n
print(paste("A proporção é:", round(proportion, 4)))
set.seed(1840)
n <- 1192
p <- 0.35
sample <- numeric(n)
# Simulação da distribuição geométrica de parâmetro p
for (i in 1:n) {
u <- runif(1)
x <- floor(log(1 - u) / log(1 - p))
sample[i] <- x
}
# Cálculo da média e do desvio padrão amostrais
mean <- mean(sample)
std <- sd(sample)
# Cálculo da soma da média com o desvio padrão amostrais
sum_mean_std <- mean + std
# Contagem dos valores simulados superiores à soma da média com o desvio padrão amostrais
count <- sum(sample > sum_mean_std)
# Cálculo da proporção
proportion <- count / n
print(paste("A proporção é:", round(proportion, 4)))
set.seed(1840)
n <- 1192
p <- 0.35
sample <- numeric(n)
# Simulação da distribuição geométrica de parâmetro p
for (i in 1:n) {
u <- runif(1)
x <- floor(log(1 - u) / log(1 - p))
sample[i] <- x
}
# Cálculo da média e do desvio padrão amostrais
mean <- mean(sample)
std <- sd(sample)
# Cálculo da soma da média com o desvio padrão amostrais
sum_mean_std <- mean + std
# Contagem dos valores simulados superiores à soma da média com o desvio padrão amostrais
count <- sum(sample > sum_mean_std)
# Cálculo da proporção
proportion <- count / n
print(paste("A proporção é:", round(proportion, 4)))
set.seed(1616)
sample_sizes <- c(30, 50, 100, 200, 300, 500, 1000)
num_samples <- 1000
p <- 0.2
conf_level <- 0.96
z <- qnorm((1 + conf_level)/2)
average_diff <- numeric(length(sample_sizes))
for (i in 1:length(sample_sizes)) {
n <- sample_sizes[i]
diff_lengths <- numeric(num_samples)
for (j in 1:num_samples) {
sample <- rbinom(n, 1, p)
sample_mean <- mean(sample)
# Method 1
grid_search <- function(p, sample_mean, n, z) {
abs(sample_mean^2 - 2*sample_mean*p + p^2 - z^2*p*(1-p)/n)
}
p_vals <- seq(0, 1, 0.001)
diffs <- sapply(p_vals, grid_search, sample_mean=sample_mean, n=n, z=z)
p_lower1 <- p_vals[which.min(diffs[1:floor(length(diffs)/2)])]
p_upper1 <- p_vals[which.min(diffs[(floor(length(diffs)/2)+1):length(diffs)]) + floor(length(diffs)/2)]
# Method 2
se <- sqrt(sample_mean * (1-sample_mean) / n)
p_lower2 <- sample_mean - z*se
p_upper2 <- sample_mean + z*se
# Difference in lengths
diff_lengths[j] <- (p_upper2 - p_lower2) - (p_upper1 - p_lower1)
}
average_diff[i] <- mean(diff_lengths)
}
# Plot the result
plot(sample_sizes, average_diff, type = "b", lwd = 2,
xlab = "Sample size", ylab = "Average difference in lengths",
main = "Difference between the methods")
set.seed(1918)
tamanho_amostra <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.6
nivel_conf <- 0.93
z <- qnorm((1 + nivel_conf)/2)
dif_media <- numeric(length(tamanho_amostra))
for (i in 1:length(tamanho_amostra)) {
n <- tamanho_amostra[i]
dif_comp <- numeric(k)
for (j in 1:k) {
amostra <- rbinom(n, 1, p)
amostra_media <- mean(amostra)
# Method 1
proc <- function(p, amostra_media, n, z) {
abs(amostra_media^2 - 2*amostra_media*p + p^2 - z^2*p*(1-p)/n)
}
p_valores <- seq(0, 1, 0.001)
diferenca <- sapply(p_valores, proc, amostra_media=amostra_media, n=n, z=z)
p_bai1 <- p_valores[which.min(diferenca[1:floor(length(diferenca)/2)])]
p_cim1 <- p_valores[which.min(diferenca[(floor(length(diferenca)/2)+1):length(diferenca)]) + floor(length(diferenca)/2)]
# Method 2
se <- sqrt(amostra_media * (1-amostra_media) / n)
p_bai2 <- amostra_media - z*se
p_cim2 <- amostra_media + z*se
# Difference in lengths
dif_comp[j] <- (p_cim2 - p_bai2) - (p_cim1 - p_bai1)
}
dif_media[i] <- mean(dif_comp)
}
# Plot the result
plot(tamanho_amostra, dif_media, type = "b", lwd = 2,
xlab = "Tamanho da amostra", ylab = "diferença entre a média de comprimentos",
main = "Diferência entre os métodos")
set.seed(1918)
tamanho_amostra <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.6
nivel_conf <- 0.93
z <- qnorm((1 + nivel_conf)/2)
dif_media <- numeric(length(tamanho_amostra))
for (i in 1:length(tamanho_amostra)) {
n <- tamanho_amostra[i]
dif_comp <- numeric(k)
for (j in 1:k) {
amostra <- rbinom(n, 1, p)
amostra_media <- mean(amostra)
# Metodo 1
proc <- function(p, amostra_media, n, z) {
abs(amostra_media^2 - 2*amostra_media*p + p^2 - z^2*p*(1-p)/n)
}
p_valores <- seq(0, 1, 0.001)
diferenca <- sapply(p_valores, proc, amostra_media=amostra_media, n=n, z=z)
p_bai1 <- p_valores[which.min(diferenca[1:floor(length(diferenca)/2)])]
p_cim1 <- p_valores[which.min(diferenca[(floor(length(diferenca)/2)+1):length(diferenca)]) + floor(length(diferenca)/2)]
# Metodo 2
se <- sqrt(amostra_media * (1-amostra_media) / n)
p_bai2 <- amostra_media - z*se
p_cim2 <- amostra_media + z*se
dif_comp[j] <- (p_cim2 - p_bai2) - (p_cim1 - p_bai1)
}
dif_media[i] <- mean(dif_comp)
}
plot(tamanho_amostra, dif_media, type = "b", lwd = 2,
xlab = "Tamanho da amostra", ylab = "Diferenças médias",
main = "Diferência entre os métodos")
set.seed(1918)
tamanho_amostra <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.6
nivel_conf <- 0.93
z <- qnorm((1 + nivel_conf)/2)
dif_media <- numeric(length(tamanho_amostra))
for (i in 1:length(tamanho_amostra)) {
n <- tamanho_amostra[i]
dif_comp <- numeric(k)
for (j in 1:k) {
amostra <- rbinom(n, 1, p)
amostra_media <- mean(amostra)
# Metodo 1
proc <- function(p, amostra_media, n, z) {
abs(amostra_media^2 - 2*amostra_media*p + p^2 - z^2*p*(1-p)/n)
}
p_valores <- seq(0, 1, 0.001)
diferenca <- sapply(p_valores, proc, amostra_media=amostra_media, n=n, z=z)
p_bai1 <- p_valores[which.min(diferenca[1:floor(length(diferenca)/2)])]
p_cim1 <- p_valores[which.min(diferenca[(floor(length(diferenca)/2)+1):length(diferenca)]) + floor(length(diferenca)/2)]
# Metodo 2
se <- sqrt(amostra_media * (1-amostra_media) / n)
p_bai2 <- amostra_media - z*se
p_cim2 <- amostra_media + z*se
dif_comp[j] <- (p_cim2 - p_bai2) - (p_cim1 - p_bai1)
}
dif_media[i] <- mean(dif_comp)
}
plot(tamanho_amostra, dif_media, type = "b", lwd = 2,
xlab = "Tamanho da amostra", ylab = "Diferenças médias",
main = "Diferênça entre os métodos")
set.seed(1918)
tamanho_amostra <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.6
nivel_conf <- 0.93
z <- qnorm((1 + nivel_conf)/2)
dif_media <- numeric(length(tamanho_amostra))
for (i in 1:length(tamanho_amostra)) {
n <- tamanho_amostra[i]
dif_comp <- numeric(k)
for (j in 1:k) {
amostra <- rbinom(n, 1, p)
amostra_media <- mean(amostra)
# Metodo 1
proc <- function(p, amostra_media, n, z) {
abs(amostra_media^2 - 2*amostra_media*p + p^2 - z^2*p*(1-p)/n)
}
p_valores <- seq(0, 1, 0.001)
diferenca <- sapply(p_valores, proc, amostra_media=amostra_media, n=n, z=z)
p_bai1 <- p_valores[which.min(diferenca[1:floor(length(diferenca)/2)])]
p_cim1 <- p_valores[which.min(diferenca[(floor(length(diferenca)/2)+1):length(diferenca)]) + floor(length(diferenca)/2)]
# Metodo 2
se <- sqrt(amostra_media * (1-amostra_media) / n)
p_bai2 <- amostra_media - z*se
p_cim2 <- amostra_media + z*se
dif_comp[j] <- (p_cim2 - p_bai2) - (p_cim1 - p_bai1)
}
dif_media[i] <- mean(dif_comp)
}
plot(tamanho_amostra, dif_media, type = "b", lwd = 2,
xlab = "Tamanho da amostra", ylab = "Diferenças médias",
main = "Diferença entre os métodos")
set.seed(1105)
tamanho_amostra <- 114
localizacao <- -0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- -1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "blue"), pch = 1)
set.seed(1105)
tamanho_amostra <- 114
localizacao <- -0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- -1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "red"), pch = 1)
set.seed(1105)
tamanho_amostra <- 114
localizacao <- -0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- 1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "red"), pch = 1)
set.seed(1105)
tamanho_amostra <- 114
localizacao <- 0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- 1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "red"), pch = 1)
set.seed(1105)
tamanho_amostra <- 114
localizacao <- 0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- 1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "red"), pch = 1)
set.seed(1105)
tamanho_amostra <- 114
localizacao <- 0.4
escala <- 1.8
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
normal_m <- 1.9
normal_var <- 4
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "yellow",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "purple")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("green", "red"), pch = 1)
# Set the seed
set.seed(1710)
# Generate a sample of size 162 from a Cauchy distribution
tamanho_amostra <- 176
localizacao <- 1.8
escala <- 1.4
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
# Generate a sample from a normal distribution for comparison
normal_m <- 1.3
normal_var <- 3.8
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
# Plot the results
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "purple",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "green")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("purple", "red"), pch = 1)
setwd("~/Desktop/IST/Probabilidades e Estatística/ProjetoPE2023/Ex8")
# Set the seed
set.seed(1710)
# Generate a sample of size 162 from a Cauchy distribution
tamanho_amostra <- 176
localizacao <- 1.8
escala <- 1.4
probabilidade = seq(1, tamanho_amostra)/(tamanho_amostra + 1)
amostra_cauchy <- rcauchy(tamanho_amostra, localizacao, escala)
amostra_cauchy_ordenada <- sort(amostra_cauchy)
quantis_cauchy <- quantile(amostra_cauchy, probabilidade)
# Generate a sample from a normal distribution for comparison
normal_m <- 1.3
normal_var <- 3.8
amostra_normal <- rnorm(tamanho_amostra, normal_m, sqrt(normal_var))
amostra_normal_ordenada <- sort(amostra_normal)
quantis_normal = quantile(amostra_normal, probabilidade)
# Plot the results
plot(quantis_cauchy, amostra_cauchy_ordenada, type = "p", col = "purple",
main = "Quantis de probabilidade - Distribuição Normal vs Cauchy",
xlab = "Quantis",
ylab = "Valores Ordenados")
points(quantis_normal, amostra_normal_ordenada, type = "p", col = "red")
abline(0, 1, lty = 2, col = "green")
legend("bottomright", legend = c("Cauchy", "Normal"),
col = c("purple", "red"), pch = 1)
